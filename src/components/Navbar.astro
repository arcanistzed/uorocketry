---
type Link = {
	url: string;
	text: string;
};

const links = [
	{ url: "/", text: "Home" },
	...(await Astro.glob("../{pages,mdx}/*"))
		.map(({ url }) => {
			if (!url || url === "/404" || url.match(/\[.*\]/)) return;
			const path = url.replace("src/mdx/", "").replace(".mdx", "").replace(/-/g, " ");
			return {
				url: `/${path}`,
				text: path.replace(/^\//, "").replace(/\b\w/g, (l: string) => l.toUpperCase()),
			};
		})
		.filter((x): x is Link => !!x),
] as Link[];

type Props = {
	active: string;
	theme: "dark" | "light";
};

const { active, theme } = Astro.props;
---

<nav class="pt-4 sm:text-xl">
	<ul class="flex flex-wrap justify-center">
		{
			links.map(link => (
				<li
					class={
						theme === "dark"
							? active === link.url
								? "text-indigo-300"
								: "text-indigo-100"
							: active === link.url
							? "text-indigo-700"
							: "text-indigo-900"
					}
				>
					<a
						href={link.url}
						class={`block border-b-2 px-6 py-4 transition-colors duration-200 hover:border-current ${
							active === link.url ? "border-current" : "border-transparent"
						}`}
					>
						{link.text}
					</a>
				</li>
			))
		}
	</ul>
</nav>
